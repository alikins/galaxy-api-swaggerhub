# coding: utf-8

"""
    Galaxy 3.2 API (wip)

    Galaxy 3.2 API (wip)  # noqa: E501

    The version of the OpenAPI document: 1.1.1
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six


class CollectionVersionArtifactDetail(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'download_url': 'str',
        'filename': 'str',
        'sha256': 'str',
        'size': 'int'
    }

    attribute_map = {
        'download_url': 'download_url',
        'filename': 'filename',
        'sha256': 'sha256',
        'size': 'size'
    }

    def __init__(self, download_url=None, filename=None, sha256=None, size=None):  # noqa: E501
        """CollectionVersionArtifactDetail - a model defined in OpenAPI"""  # noqa: E501

        self._download_url = None
        self._filename = None
        self._sha256 = None
        self._size = None
        self.discriminator = None

        if download_url is not None:
            self.download_url = download_url
        if filename is not None:
            self.filename = filename
        if sha256 is not None:
            self.sha256 = sha256
        if size is not None:
            self.size = size

    @property
    def download_url(self):
        """Gets the download_url of this CollectionVersionArtifactDetail.  # noqa: E501


        :return: The download_url of this CollectionVersionArtifactDetail.  # noqa: E501
        :rtype: str
        """
        return self._download_url

    @download_url.setter
    def download_url(self, download_url):
        """Sets the download_url of this CollectionVersionArtifactDetail.


        :param download_url: The download_url of this CollectionVersionArtifactDetail.  # noqa: E501
        :type: str
        """

        self._download_url = download_url

    @property
    def filename(self):
        """Gets the filename of this CollectionVersionArtifactDetail.  # noqa: E501


        :return: The filename of this CollectionVersionArtifactDetail.  # noqa: E501
        :rtype: str
        """
        return self._filename

    @filename.setter
    def filename(self, filename):
        """Sets the filename of this CollectionVersionArtifactDetail.


        :param filename: The filename of this CollectionVersionArtifactDetail.  # noqa: E501
        :type: str
        """

        self._filename = filename

    @property
    def sha256(self):
        """Gets the sha256 of this CollectionVersionArtifactDetail.  # noqa: E501


        :return: The sha256 of this CollectionVersionArtifactDetail.  # noqa: E501
        :rtype: str
        """
        return self._sha256

    @sha256.setter
    def sha256(self, sha256):
        """Sets the sha256 of this CollectionVersionArtifactDetail.


        :param sha256: The sha256 of this CollectionVersionArtifactDetail.  # noqa: E501
        :type: str
        """

        self._sha256 = sha256

    @property
    def size(self):
        """Gets the size of this CollectionVersionArtifactDetail.  # noqa: E501


        :return: The size of this CollectionVersionArtifactDetail.  # noqa: E501
        :rtype: int
        """
        return self._size

    @size.setter
    def size(self, size):
        """Sets the size of this CollectionVersionArtifactDetail.


        :param size: The size of this CollectionVersionArtifactDetail.  # noqa: E501
        :type: int
        """

        self._size = size

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, CollectionVersionArtifactDetail):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
