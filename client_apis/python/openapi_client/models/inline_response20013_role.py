# coding: utf-8

"""
    Galaxy 3.2 API (wip)

    Galaxy 3.2 API (wip)  # noqa: E501

    The version of the OpenAPI document: 1.1.1
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six


class InlineResponse20013Role(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'github_repo': 'str',
        'github_user': 'str',
        'id': 'int',
        'name': 'str',
        'namespace': 'int'
    }

    attribute_map = {
        'github_repo': 'github_repo',
        'github_user': 'github_user',
        'id': 'id',
        'name': 'name',
        'namespace': 'namespace'
    }

    def __init__(self, github_repo=None, github_user=None, id=None, name=None, namespace=None):  # noqa: E501
        """InlineResponse20013Role - a model defined in OpenAPI"""  # noqa: E501

        self._github_repo = None
        self._github_user = None
        self._id = None
        self._name = None
        self._namespace = None
        self.discriminator = None

        if github_repo is not None:
            self.github_repo = github_repo
        if github_user is not None:
            self.github_user = github_user
        if id is not None:
            self.id = id
        self.name = name
        self.namespace = namespace

    @property
    def github_repo(self):
        """Gets the github_repo of this InlineResponse20013Role.  # noqa: E501


        :return: The github_repo of this InlineResponse20013Role.  # noqa: E501
        :rtype: str
        """
        return self._github_repo

    @github_repo.setter
    def github_repo(self, github_repo):
        """Sets the github_repo of this InlineResponse20013Role.


        :param github_repo: The github_repo of this InlineResponse20013Role.  # noqa: E501
        :type: str
        """

        self._github_repo = github_repo

    @property
    def github_user(self):
        """Gets the github_user of this InlineResponse20013Role.  # noqa: E501


        :return: The github_user of this InlineResponse20013Role.  # noqa: E501
        :rtype: str
        """
        return self._github_user

    @github_user.setter
    def github_user(self, github_user):
        """Sets the github_user of this InlineResponse20013Role.


        :param github_user: The github_user of this InlineResponse20013Role.  # noqa: E501
        :type: str
        """

        self._github_user = github_user

    @property
    def id(self):
        """Gets the id of this InlineResponse20013Role.  # noqa: E501


        :return: The id of this InlineResponse20013Role.  # noqa: E501
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this InlineResponse20013Role.


        :param id: The id of this InlineResponse20013Role.  # noqa: E501
        :type: int
        """

        self._id = id

    @property
    def name(self):
        """Gets the name of this InlineResponse20013Role.  # noqa: E501


        :return: The name of this InlineResponse20013Role.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this InlineResponse20013Role.


        :param name: The name of this InlineResponse20013Role.  # noqa: E501
        :type: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")  # noqa: E501
        if name is not None and len(name) > 512:
            raise ValueError("Invalid value for `name`, length must be less than or equal to `512`")  # noqa: E501

        self._name = name

    @property
    def namespace(self):
        """Gets the namespace of this InlineResponse20013Role.  # noqa: E501


        :return: The namespace of this InlineResponse20013Role.  # noqa: E501
        :rtype: int
        """
        return self._namespace

    @namespace.setter
    def namespace(self, namespace):
        """Sets the namespace of this InlineResponse20013Role.


        :param namespace: The namespace of this InlineResponse20013Role.  # noqa: E501
        :type: int
        """
        if namespace is None:
            raise ValueError("Invalid value for `namespace`, must not be `None`")  # noqa: E501

        self._namespace = namespace

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, InlineResponse20013Role):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
