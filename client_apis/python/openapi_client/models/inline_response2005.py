# coding: utf-8

"""
    Galaxy 3.2 API (wip)

    Galaxy 3.2 API (wip)  # noqa: E501

    The version of the OpenAPI document: 1.1.1
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six


class InlineResponse2005(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'finished_at': 'datetime',
        'href': 'str',
        'id': 'int',
        'name': 'str',
        'namespace': 'str',
        'started_at': 'datetime',
        'state': 'str',
        'type': 'str',
        'version': 'str'
    }

    attribute_map = {
        'finished_at': 'finished_at',
        'href': 'href',
        'id': 'id',
        'name': 'name',
        'namespace': 'namespace',
        'started_at': 'started_at',
        'state': 'state',
        'type': 'type',
        'version': 'version'
    }

    def __init__(self, finished_at=None, href=None, id=None, name=None, namespace=None, started_at=None, state=None, type=None, version=None):  # noqa: E501
        """InlineResponse2005 - a model defined in OpenAPI"""  # noqa: E501

        self._finished_at = None
        self._href = None
        self._id = None
        self._name = None
        self._namespace = None
        self._started_at = None
        self._state = None
        self._type = None
        self._version = None
        self.discriminator = None

        self.finished_at = finished_at
        if href is not None:
            self.href = href
        if id is not None:
            self.id = id
        self.name = name
        if namespace is not None:
            self.namespace = namespace
        self.started_at = started_at
        self.state = state
        if type is not None:
            self.type = type
        self.version = version

    @property
    def finished_at(self):
        """Gets the finished_at of this InlineResponse2005.  # noqa: E501


        :return: The finished_at of this InlineResponse2005.  # noqa: E501
        :rtype: datetime
        """
        return self._finished_at

    @finished_at.setter
    def finished_at(self, finished_at):
        """Sets the finished_at of this InlineResponse2005.


        :param finished_at: The finished_at of this InlineResponse2005.  # noqa: E501
        :type: datetime
        """
        if finished_at is None:
            raise ValueError("Invalid value for `finished_at`, must not be `None`")  # noqa: E501

        self._finished_at = finished_at

    @property
    def href(self):
        """Gets the href of this InlineResponse2005.  # noqa: E501


        :return: The href of this InlineResponse2005.  # noqa: E501
        :rtype: str
        """
        return self._href

    @href.setter
    def href(self, href):
        """Sets the href of this InlineResponse2005.


        :param href: The href of this InlineResponse2005.  # noqa: E501
        :type: str
        """

        self._href = href

    @property
    def id(self):
        """Gets the id of this InlineResponse2005.  # noqa: E501


        :return: The id of this InlineResponse2005.  # noqa: E501
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this InlineResponse2005.


        :param id: The id of this InlineResponse2005.  # noqa: E501
        :type: int
        """

        self._id = id

    @property
    def name(self):
        """Gets the name of this InlineResponse2005.  # noqa: E501


        :return: The name of this InlineResponse2005.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this InlineResponse2005.


        :param name: The name of this InlineResponse2005.  # noqa: E501
        :type: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")  # noqa: E501
        if name is not None and len(name) > 64:
            raise ValueError("Invalid value for `name`, length must be less than or equal to `64`")  # noqa: E501

        self._name = name

    @property
    def namespace(self):
        """Gets the namespace of this InlineResponse2005.  # noqa: E501


        :return: The namespace of this InlineResponse2005.  # noqa: E501
        :rtype: str
        """
        return self._namespace

    @namespace.setter
    def namespace(self, namespace):
        """Sets the namespace of this InlineResponse2005.


        :param namespace: The namespace of this InlineResponse2005.  # noqa: E501
        :type: str
        """

        self._namespace = namespace

    @property
    def started_at(self):
        """Gets the started_at of this InlineResponse2005.  # noqa: E501


        :return: The started_at of this InlineResponse2005.  # noqa: E501
        :rtype: datetime
        """
        return self._started_at

    @started_at.setter
    def started_at(self, started_at):
        """Sets the started_at of this InlineResponse2005.


        :param started_at: The started_at of this InlineResponse2005.  # noqa: E501
        :type: datetime
        """
        if started_at is None:
            raise ValueError("Invalid value for `started_at`, must not be `None`")  # noqa: E501

        self._started_at = started_at

    @property
    def state(self):
        """Gets the state of this InlineResponse2005.  # noqa: E501


        :return: The state of this InlineResponse2005.  # noqa: E501
        :rtype: str
        """
        return self._state

    @state.setter
    def state(self, state):
        """Sets the state of this InlineResponse2005.


        :param state: The state of this InlineResponse2005.  # noqa: E501
        :type: str
        """
        if state is None:
            raise ValueError("Invalid value for `state`, must not be `None`")  # noqa: E501

        self._state = state

    @property
    def type(self):
        """Gets the type of this InlineResponse2005.  # noqa: E501


        :return: The type of this InlineResponse2005.  # noqa: E501
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this InlineResponse2005.


        :param type: The type of this InlineResponse2005.  # noqa: E501
        :type: str
        """

        self._type = type

    @property
    def version(self):
        """Gets the version of this InlineResponse2005.  # noqa: E501


        :return: The version of this InlineResponse2005.  # noqa: E501
        :rtype: str
        """
        return self._version

    @version.setter
    def version(self, version):
        """Sets the version of this InlineResponse2005.


        :param version: The version of this InlineResponse2005.  # noqa: E501
        :type: str
        """
        if version is None:
            raise ValueError("Invalid value for `version`, must not be `None`")  # noqa: E501
        if version is not None and len(version) > 64:
            raise ValueError("Invalid value for `version`, length must be less than or equal to `64`")  # noqa: E501

        self._version = version

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, InlineResponse2005):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
