# coding: utf-8

"""
    Galaxy 3.2 API (wip)

    Galaxy 3.2 API (wip)  # noqa: E501

    The version of the OpenAPI document: 1.1.1
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six


class InlineResponse2004LatestVersion(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'contents': 'object',
        'created': 'datetime',
        'metadata': 'object',
        'modified': 'datetime',
        'pk': 'int',
        'quality_score': 'float',
        'readme_html': 'str',
        'version': 'str'
    }

    attribute_map = {
        'contents': 'contents',
        'created': 'created',
        'metadata': 'metadata',
        'modified': 'modified',
        'pk': 'pk',
        'quality_score': 'quality_score',
        'readme_html': 'readme_html',
        'version': 'version'
    }

    def __init__(self, contents=None, created=None, metadata=None, modified=None, pk=None, quality_score=None, readme_html=None, version=None):  # noqa: E501
        """InlineResponse2004LatestVersion - a model defined in OpenAPI"""  # noqa: E501

        self._contents = None
        self._created = None
        self._metadata = None
        self._modified = None
        self._pk = None
        self._quality_score = None
        self._readme_html = None
        self._version = None
        self.discriminator = None

        self.contents = contents
        if created is not None:
            self.created = created
        self.metadata = metadata
        if modified is not None:
            self.modified = modified
        if pk is not None:
            self.pk = pk
        self.quality_score = quality_score
        if readme_html is not None:
            self.readme_html = readme_html
        self.version = version

    @property
    def contents(self):
        """Gets the contents of this InlineResponse2004LatestVersion.  # noqa: E501


        :return: The contents of this InlineResponse2004LatestVersion.  # noqa: E501
        :rtype: object
        """
        return self._contents

    @contents.setter
    def contents(self, contents):
        """Sets the contents of this InlineResponse2004LatestVersion.


        :param contents: The contents of this InlineResponse2004LatestVersion.  # noqa: E501
        :type: object
        """
        if contents is None:
            raise ValueError("Invalid value for `contents`, must not be `None`")  # noqa: E501

        self._contents = contents

    @property
    def created(self):
        """Gets the created of this InlineResponse2004LatestVersion.  # noqa: E501


        :return: The created of this InlineResponse2004LatestVersion.  # noqa: E501
        :rtype: datetime
        """
        return self._created

    @created.setter
    def created(self, created):
        """Sets the created of this InlineResponse2004LatestVersion.


        :param created: The created of this InlineResponse2004LatestVersion.  # noqa: E501
        :type: datetime
        """

        self._created = created

    @property
    def metadata(self):
        """Gets the metadata of this InlineResponse2004LatestVersion.  # noqa: E501


        :return: The metadata of this InlineResponse2004LatestVersion.  # noqa: E501
        :rtype: object
        """
        return self._metadata

    @metadata.setter
    def metadata(self, metadata):
        """Sets the metadata of this InlineResponse2004LatestVersion.


        :param metadata: The metadata of this InlineResponse2004LatestVersion.  # noqa: E501
        :type: object
        """
        if metadata is None:
            raise ValueError("Invalid value for `metadata`, must not be `None`")  # noqa: E501

        self._metadata = metadata

    @property
    def modified(self):
        """Gets the modified of this InlineResponse2004LatestVersion.  # noqa: E501


        :return: The modified of this InlineResponse2004LatestVersion.  # noqa: E501
        :rtype: datetime
        """
        return self._modified

    @modified.setter
    def modified(self, modified):
        """Sets the modified of this InlineResponse2004LatestVersion.


        :param modified: The modified of this InlineResponse2004LatestVersion.  # noqa: E501
        :type: datetime
        """

        self._modified = modified

    @property
    def pk(self):
        """Gets the pk of this InlineResponse2004LatestVersion.  # noqa: E501


        :return: The pk of this InlineResponse2004LatestVersion.  # noqa: E501
        :rtype: int
        """
        return self._pk

    @pk.setter
    def pk(self, pk):
        """Sets the pk of this InlineResponse2004LatestVersion.


        :param pk: The pk of this InlineResponse2004LatestVersion.  # noqa: E501
        :type: int
        """

        self._pk = pk

    @property
    def quality_score(self):
        """Gets the quality_score of this InlineResponse2004LatestVersion.  # noqa: E501


        :return: The quality_score of this InlineResponse2004LatestVersion.  # noqa: E501
        :rtype: float
        """
        return self._quality_score

    @quality_score.setter
    def quality_score(self, quality_score):
        """Sets the quality_score of this InlineResponse2004LatestVersion.


        :param quality_score: The quality_score of this InlineResponse2004LatestVersion.  # noqa: E501
        :type: float
        """
        if quality_score is not None and quality_score > 5:  # noqa: E501
            raise ValueError("Invalid value for `quality_score`, must be a value less than or equal to `5`")  # noqa: E501
        if quality_score is not None and quality_score < 0:  # noqa: E501
            raise ValueError("Invalid value for `quality_score`, must be a value greater than or equal to `0`")  # noqa: E501

        self._quality_score = quality_score

    @property
    def readme_html(self):
        """Gets the readme_html of this InlineResponse2004LatestVersion.  # noqa: E501


        :return: The readme_html of this InlineResponse2004LatestVersion.  # noqa: E501
        :rtype: str
        """
        return self._readme_html

    @readme_html.setter
    def readme_html(self, readme_html):
        """Sets the readme_html of this InlineResponse2004LatestVersion.


        :param readme_html: The readme_html of this InlineResponse2004LatestVersion.  # noqa: E501
        :type: str
        """

        self._readme_html = readme_html

    @property
    def version(self):
        """Gets the version of this InlineResponse2004LatestVersion.  # noqa: E501


        :return: The version of this InlineResponse2004LatestVersion.  # noqa: E501
        :rtype: str
        """
        return self._version

    @version.setter
    def version(self, version):
        """Sets the version of this InlineResponse2004LatestVersion.


        :param version: The version of this InlineResponse2004LatestVersion.  # noqa: E501
        :type: str
        """
        if version is None:
            raise ValueError("Invalid value for `version`, must not be `None`")  # noqa: E501
        if version is not None and len(version) > 64:
            raise ValueError("Invalid value for `version`, length must be less than or equal to `64`")  # noqa: E501

        self._version = version

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, InlineResponse2004LatestVersion):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
