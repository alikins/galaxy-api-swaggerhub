# coding: utf-8

"""
    Galaxy 3.2 API (wip)

    Galaxy 3.2 API (wip)  # noqa: E501

    The version of the OpenAPI document: 1.2.0
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six


class CollectionVersion(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'artifact': 'CollectionVersionDetailArtifact',
        'metadata': 'CollectionVersionDetailMetadata',
        'hidden': 'bool',
        'download_url': 'str',
        'namespace': 'CollectionNamespace',
        'id': 'int',
        'href': 'str',
        'collection': 'CollectionVersionDetailCollection'
    }

    attribute_map = {
        'artifact': 'artifact',
        'metadata': 'metadata',
        'hidden': 'hidden',
        'download_url': 'download_url',
        'namespace': 'namespace',
        'id': 'id',
        'href': 'href',
        'collection': 'collection'
    }

    def __init__(self, artifact=None, metadata=None, hidden=None, download_url=None, namespace=None, id=None, href=None, collection=None):  # noqa: E501
        """CollectionVersion - a model defined in OpenAPI"""  # noqa: E501

        self._artifact = None
        self._metadata = None
        self._hidden = None
        self._download_url = None
        self._namespace = None
        self._id = None
        self._href = None
        self._collection = None
        self.discriminator = None

        if artifact is not None:
            self.artifact = artifact
        if metadata is not None:
            self.metadata = metadata
        if hidden is not None:
            self.hidden = hidden
        if download_url is not None:
            self.download_url = download_url
        if namespace is not None:
            self.namespace = namespace
        if id is not None:
            self.id = id
        if href is not None:
            self.href = href
        if collection is not None:
            self.collection = collection

    @property
    def artifact(self):
        """Gets the artifact of this CollectionVersion.  # noqa: E501


        :return: The artifact of this CollectionVersion.  # noqa: E501
        :rtype: CollectionVersionDetailArtifact
        """
        return self._artifact

    @artifact.setter
    def artifact(self, artifact):
        """Sets the artifact of this CollectionVersion.


        :param artifact: The artifact of this CollectionVersion.  # noqa: E501
        :type: CollectionVersionDetailArtifact
        """

        self._artifact = artifact

    @property
    def metadata(self):
        """Gets the metadata of this CollectionVersion.  # noqa: E501


        :return: The metadata of this CollectionVersion.  # noqa: E501
        :rtype: CollectionVersionDetailMetadata
        """
        return self._metadata

    @metadata.setter
    def metadata(self, metadata):
        """Sets the metadata of this CollectionVersion.


        :param metadata: The metadata of this CollectionVersion.  # noqa: E501
        :type: CollectionVersionDetailMetadata
        """

        self._metadata = metadata

    @property
    def hidden(self):
        """Gets the hidden of this CollectionVersion.  # noqa: E501


        :return: The hidden of this CollectionVersion.  # noqa: E501
        :rtype: bool
        """
        return self._hidden

    @hidden.setter
    def hidden(self, hidden):
        """Sets the hidden of this CollectionVersion.


        :param hidden: The hidden of this CollectionVersion.  # noqa: E501
        :type: bool
        """

        self._hidden = hidden

    @property
    def download_url(self):
        """Gets the download_url of this CollectionVersion.  # noqa: E501


        :return: The download_url of this CollectionVersion.  # noqa: E501
        :rtype: str
        """
        return self._download_url

    @download_url.setter
    def download_url(self, download_url):
        """Sets the download_url of this CollectionVersion.


        :param download_url: The download_url of this CollectionVersion.  # noqa: E501
        :type: str
        """

        self._download_url = download_url

    @property
    def namespace(self):
        """Gets the namespace of this CollectionVersion.  # noqa: E501


        :return: The namespace of this CollectionVersion.  # noqa: E501
        :rtype: CollectionNamespace
        """
        return self._namespace

    @namespace.setter
    def namespace(self, namespace):
        """Sets the namespace of this CollectionVersion.


        :param namespace: The namespace of this CollectionVersion.  # noqa: E501
        :type: CollectionNamespace
        """

        self._namespace = namespace

    @property
    def id(self):
        """Gets the id of this CollectionVersion.  # noqa: E501


        :return: The id of this CollectionVersion.  # noqa: E501
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this CollectionVersion.


        :param id: The id of this CollectionVersion.  # noqa: E501
        :type: int
        """

        self._id = id

    @property
    def href(self):
        """Gets the href of this CollectionVersion.  # noqa: E501


        :return: The href of this CollectionVersion.  # noqa: E501
        :rtype: str
        """
        return self._href

    @href.setter
    def href(self, href):
        """Sets the href of this CollectionVersion.


        :param href: The href of this CollectionVersion.  # noqa: E501
        :type: str
        """

        self._href = href

    @property
    def collection(self):
        """Gets the collection of this CollectionVersion.  # noqa: E501


        :return: The collection of this CollectionVersion.  # noqa: E501
        :rtype: CollectionVersionDetailCollection
        """
        return self._collection

    @collection.setter
    def collection(self, collection):
        """Sets the collection of this CollectionVersion.


        :param collection: The collection of this CollectionVersion.  # noqa: E501
        :type: CollectionVersionDetailCollection
        """

        self._collection = collection

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, CollectionVersion):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
