# coding: utf-8

"""
    Galaxy 3.2 API (wip)

    Galaxy 3.2 API (wip)  # noqa: E501

    The version of the OpenAPI document: 1.1.1
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six


class Body3(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'collections_followed': 'list[int]',
        'namespaces_followed': 'list[int]',
        'preferences': 'object',
        'repositories_followed': 'list[int]'
    }

    attribute_map = {
        'collections_followed': 'collections_followed',
        'namespaces_followed': 'namespaces_followed',
        'preferences': 'preferences',
        'repositories_followed': 'repositories_followed'
    }

    def __init__(self, collections_followed=None, namespaces_followed=None, preferences=None, repositories_followed=None):  # noqa: E501
        """Body3 - a model defined in OpenAPI"""  # noqa: E501

        self._collections_followed = None
        self._namespaces_followed = None
        self._preferences = None
        self._repositories_followed = None
        self.discriminator = None

        if collections_followed is not None:
            self.collections_followed = collections_followed
        if namespaces_followed is not None:
            self.namespaces_followed = namespaces_followed
        if preferences is not None:
            self.preferences = preferences
        if repositories_followed is not None:
            self.repositories_followed = repositories_followed

    @property
    def collections_followed(self):
        """Gets the collections_followed of this Body3.  # noqa: E501


        :return: The collections_followed of this Body3.  # noqa: E501
        :rtype: list[int]
        """
        return self._collections_followed

    @collections_followed.setter
    def collections_followed(self, collections_followed):
        """Sets the collections_followed of this Body3.


        :param collections_followed: The collections_followed of this Body3.  # noqa: E501
        :type: list[int]
        """

        self._collections_followed = collections_followed

    @property
    def namespaces_followed(self):
        """Gets the namespaces_followed of this Body3.  # noqa: E501


        :return: The namespaces_followed of this Body3.  # noqa: E501
        :rtype: list[int]
        """
        return self._namespaces_followed

    @namespaces_followed.setter
    def namespaces_followed(self, namespaces_followed):
        """Sets the namespaces_followed of this Body3.


        :param namespaces_followed: The namespaces_followed of this Body3.  # noqa: E501
        :type: list[int]
        """

        self._namespaces_followed = namespaces_followed

    @property
    def preferences(self):
        """Gets the preferences of this Body3.  # noqa: E501


        :return: The preferences of this Body3.  # noqa: E501
        :rtype: object
        """
        return self._preferences

    @preferences.setter
    def preferences(self, preferences):
        """Sets the preferences of this Body3.


        :param preferences: The preferences of this Body3.  # noqa: E501
        :type: object
        """

        self._preferences = preferences

    @property
    def repositories_followed(self):
        """Gets the repositories_followed of this Body3.  # noqa: E501


        :return: The repositories_followed of this Body3.  # noqa: E501
        :rtype: list[int]
        """
        return self._repositories_followed

    @repositories_followed.setter
    def repositories_followed(self, repositories_followed):
        """Sets the repositories_followed of this Body3.


        :param repositories_followed: The repositories_followed of this Body3.  # noqa: E501
        :type: list[int]
        """

        self._repositories_followed = repositories_followed

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Body3):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
