# coding: utf-8

"""
    Galaxy 3.2 API (wip)

    Galaxy 3.2 API (wip)  # noqa: E501

    The version of the OpenAPI document: 1.2.0
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six


class V1BaseModel(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'id': 'int',
        'url': 'str',
        'related': 'dict(str, str)',
        'summary_fields': 'dict(str, object)',
        'active': 'str',
        'modified': 'str',
        'created': 'str'
    }

    attribute_map = {
        'id': 'id',
        'url': 'url',
        'related': 'related',
        'summary_fields': 'summary_fields',
        'active': 'active',
        'modified': 'modified',
        'created': 'created'
    }

    def __init__(self, id=None, url=None, related=None, summary_fields=None, active=None, modified=None, created=None):  # noqa: E501
        """V1BaseModel - a model defined in OpenAPI"""  # noqa: E501

        self._id = None
        self._url = None
        self._related = None
        self._summary_fields = None
        self._active = None
        self._modified = None
        self._created = None
        self.discriminator = None

        self.id = id
        if url is not None:
            self.url = url
        if related is not None:
            self.related = related
        if summary_fields is not None:
            self.summary_fields = summary_fields
        if active is not None:
            self.active = active
        if modified is not None:
            self.modified = modified
        if created is not None:
            self.created = created

    @property
    def id(self):
        """Gets the id of this V1BaseModel.  # noqa: E501

        Database ID for this object.  # noqa: E501

        :return: The id of this V1BaseModel.  # noqa: E501
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this V1BaseModel.

        Database ID for this object.  # noqa: E501

        :param id: The id of this V1BaseModel.  # noqa: E501
        :type: int
        """
        if id is None:
            raise ValueError("Invalid value for `id`, must not be `None`")  # noqa: E501

        self._id = id

    @property
    def url(self):
        """Gets the url of this V1BaseModel.  # noqa: E501

        URL for this resource.  # noqa: E501

        :return: The url of this V1BaseModel.  # noqa: E501
        :rtype: str
        """
        return self._url

    @url.setter
    def url(self, url):
        """Sets the url of this V1BaseModel.

        URL for this resource.  # noqa: E501

        :param url: The url of this V1BaseModel.  # noqa: E501
        :type: str
        """

        self._url = url

    @property
    def related(self):
        """Gets the related of this V1BaseModel.  # noqa: E501

        Data structure with URLs of related resources.  # noqa: E501

        :return: The related of this V1BaseModel.  # noqa: E501
        :rtype: dict(str, str)
        """
        return self._related

    @related.setter
    def related(self, related):
        """Sets the related of this V1BaseModel.

        Data structure with URLs of related resources.  # noqa: E501

        :param related: The related of this V1BaseModel.  # noqa: E501
        :type: dict(str, str)
        """

        self._related = related

    @property
    def summary_fields(self):
        """Gets the summary_fields of this V1BaseModel.  # noqa: E501

        Data structure with name/description for related resources.  # noqa: E501

        :return: The summary_fields of this V1BaseModel.  # noqa: E501
        :rtype: dict(str, object)
        """
        return self._summary_fields

    @summary_fields.setter
    def summary_fields(self, summary_fields):
        """Sets the summary_fields of this V1BaseModel.

        Data structure with name/description for related resources.  # noqa: E501

        :param summary_fields: The summary_fields of this V1BaseModel.  # noqa: E501
        :type: dict(str, object)
        """

        self._summary_fields = summary_fields

    @property
    def active(self):
        """Gets the active of this V1BaseModel.  # noqa: E501


        :return: The active of this V1BaseModel.  # noqa: E501
        :rtype: str
        """
        return self._active

    @active.setter
    def active(self, active):
        """Sets the active of this V1BaseModel.


        :param active: The active of this V1BaseModel.  # noqa: E501
        :type: str
        """

        self._active = active

    @property
    def modified(self):
        """Gets the modified of this V1BaseModel.  # noqa: E501

        Timestamp when this object was last modified.  # noqa: E501

        :return: The modified of this V1BaseModel.  # noqa: E501
        :rtype: str
        """
        return self._modified

    @modified.setter
    def modified(self, modified):
        """Sets the modified of this V1BaseModel.

        Timestamp when this object was last modified.  # noqa: E501

        :param modified: The modified of this V1BaseModel.  # noqa: E501
        :type: str
        """

        self._modified = modified

    @property
    def created(self):
        """Gets the created of this V1BaseModel.  # noqa: E501

        Timestamp when this object was created.  # noqa: E501

        :return: The created of this V1BaseModel.  # noqa: E501
        :rtype: str
        """
        return self._created

    @created.setter
    def created(self, created):
        """Sets the created of this V1BaseModel.

        Timestamp when this object was created.  # noqa: E501

        :param created: The created of this V1BaseModel.  # noqa: E501
        :type: str
        """

        self._created = created

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, V1BaseModel):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
