# coding: utf-8

"""
    Galaxy 3.2 API (wip)

    Galaxy 3.2 API (wip)  # noqa: E501

    The version of the OpenAPI document: 1.2.0
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six


class CollectionVersionDetailMetadata(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'documentation': 'object',
        'description': 'str',
        'readme': 'str',
        'repository': 'object',
        'issues': 'object',
        'version': 'str',
        'license_file': 'object',
        'tags': 'list[str]',
        'dependencies': 'object',
        'license': 'list[str]',
        'name': 'str',
        'namespace': 'str',
        'authors': 'list[str]',
        'homepage': 'object'
    }

    attribute_map = {
        'documentation': 'documentation',
        'description': 'description',
        'readme': 'readme',
        'repository': 'repository',
        'issues': 'issues',
        'version': 'version',
        'license_file': 'license_file',
        'tags': 'tags',
        'dependencies': 'dependencies',
        'license': 'license',
        'name': 'name',
        'namespace': 'namespace',
        'authors': 'authors',
        'homepage': 'homepage'
    }

    def __init__(self, documentation=None, description=None, readme=None, repository=None, issues=None, version=None, license_file=None, tags=None, dependencies=None, license=None, name=None, namespace=None, authors=None, homepage=None):  # noqa: E501
        """CollectionVersionDetailMetadata - a model defined in OpenAPI"""  # noqa: E501

        self._documentation = None
        self._description = None
        self._readme = None
        self._repository = None
        self._issues = None
        self._version = None
        self._license_file = None
        self._tags = None
        self._dependencies = None
        self._license = None
        self._name = None
        self._namespace = None
        self._authors = None
        self._homepage = None
        self.discriminator = None

        if documentation is not None:
            self.documentation = documentation
        if description is not None:
            self.description = description
        if readme is not None:
            self.readme = readme
        if repository is not None:
            self.repository = repository
        if issues is not None:
            self.issues = issues
        if version is not None:
            self.version = version
        if license_file is not None:
            self.license_file = license_file
        if tags is not None:
            self.tags = tags
        if dependencies is not None:
            self.dependencies = dependencies
        if license is not None:
            self.license = license
        if name is not None:
            self.name = name
        if namespace is not None:
            self.namespace = namespace
        if authors is not None:
            self.authors = authors
        if homepage is not None:
            self.homepage = homepage

    @property
    def documentation(self):
        """Gets the documentation of this CollectionVersionDetailMetadata.  # noqa: E501


        :return: The documentation of this CollectionVersionDetailMetadata.  # noqa: E501
        :rtype: object
        """
        return self._documentation

    @documentation.setter
    def documentation(self, documentation):
        """Sets the documentation of this CollectionVersionDetailMetadata.


        :param documentation: The documentation of this CollectionVersionDetailMetadata.  # noqa: E501
        :type: object
        """

        self._documentation = documentation

    @property
    def description(self):
        """Gets the description of this CollectionVersionDetailMetadata.  # noqa: E501


        :return: The description of this CollectionVersionDetailMetadata.  # noqa: E501
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this CollectionVersionDetailMetadata.


        :param description: The description of this CollectionVersionDetailMetadata.  # noqa: E501
        :type: str
        """

        self._description = description

    @property
    def readme(self):
        """Gets the readme of this CollectionVersionDetailMetadata.  # noqa: E501


        :return: The readme of this CollectionVersionDetailMetadata.  # noqa: E501
        :rtype: str
        """
        return self._readme

    @readme.setter
    def readme(self, readme):
        """Sets the readme of this CollectionVersionDetailMetadata.


        :param readme: The readme of this CollectionVersionDetailMetadata.  # noqa: E501
        :type: str
        """

        self._readme = readme

    @property
    def repository(self):
        """Gets the repository of this CollectionVersionDetailMetadata.  # noqa: E501


        :return: The repository of this CollectionVersionDetailMetadata.  # noqa: E501
        :rtype: object
        """
        return self._repository

    @repository.setter
    def repository(self, repository):
        """Sets the repository of this CollectionVersionDetailMetadata.


        :param repository: The repository of this CollectionVersionDetailMetadata.  # noqa: E501
        :type: object
        """

        self._repository = repository

    @property
    def issues(self):
        """Gets the issues of this CollectionVersionDetailMetadata.  # noqa: E501


        :return: The issues of this CollectionVersionDetailMetadata.  # noqa: E501
        :rtype: object
        """
        return self._issues

    @issues.setter
    def issues(self, issues):
        """Sets the issues of this CollectionVersionDetailMetadata.


        :param issues: The issues of this CollectionVersionDetailMetadata.  # noqa: E501
        :type: object
        """

        self._issues = issues

    @property
    def version(self):
        """Gets the version of this CollectionVersionDetailMetadata.  # noqa: E501


        :return: The version of this CollectionVersionDetailMetadata.  # noqa: E501
        :rtype: str
        """
        return self._version

    @version.setter
    def version(self, version):
        """Sets the version of this CollectionVersionDetailMetadata.


        :param version: The version of this CollectionVersionDetailMetadata.  # noqa: E501
        :type: str
        """

        self._version = version

    @property
    def license_file(self):
        """Gets the license_file of this CollectionVersionDetailMetadata.  # noqa: E501


        :return: The license_file of this CollectionVersionDetailMetadata.  # noqa: E501
        :rtype: object
        """
        return self._license_file

    @license_file.setter
    def license_file(self, license_file):
        """Sets the license_file of this CollectionVersionDetailMetadata.


        :param license_file: The license_file of this CollectionVersionDetailMetadata.  # noqa: E501
        :type: object
        """

        self._license_file = license_file

    @property
    def tags(self):
        """Gets the tags of this CollectionVersionDetailMetadata.  # noqa: E501


        :return: The tags of this CollectionVersionDetailMetadata.  # noqa: E501
        :rtype: list[str]
        """
        return self._tags

    @tags.setter
    def tags(self, tags):
        """Sets the tags of this CollectionVersionDetailMetadata.


        :param tags: The tags of this CollectionVersionDetailMetadata.  # noqa: E501
        :type: list[str]
        """

        self._tags = tags

    @property
    def dependencies(self):
        """Gets the dependencies of this CollectionVersionDetailMetadata.  # noqa: E501


        :return: The dependencies of this CollectionVersionDetailMetadata.  # noqa: E501
        :rtype: object
        """
        return self._dependencies

    @dependencies.setter
    def dependencies(self, dependencies):
        """Sets the dependencies of this CollectionVersionDetailMetadata.


        :param dependencies: The dependencies of this CollectionVersionDetailMetadata.  # noqa: E501
        :type: object
        """

        self._dependencies = dependencies

    @property
    def license(self):
        """Gets the license of this CollectionVersionDetailMetadata.  # noqa: E501


        :return: The license of this CollectionVersionDetailMetadata.  # noqa: E501
        :rtype: list[str]
        """
        return self._license

    @license.setter
    def license(self, license):
        """Sets the license of this CollectionVersionDetailMetadata.


        :param license: The license of this CollectionVersionDetailMetadata.  # noqa: E501
        :type: list[str]
        """

        self._license = license

    @property
    def name(self):
        """Gets the name of this CollectionVersionDetailMetadata.  # noqa: E501


        :return: The name of this CollectionVersionDetailMetadata.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this CollectionVersionDetailMetadata.


        :param name: The name of this CollectionVersionDetailMetadata.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def namespace(self):
        """Gets the namespace of this CollectionVersionDetailMetadata.  # noqa: E501


        :return: The namespace of this CollectionVersionDetailMetadata.  # noqa: E501
        :rtype: str
        """
        return self._namespace

    @namespace.setter
    def namespace(self, namespace):
        """Sets the namespace of this CollectionVersionDetailMetadata.


        :param namespace: The namespace of this CollectionVersionDetailMetadata.  # noqa: E501
        :type: str
        """

        self._namespace = namespace

    @property
    def authors(self):
        """Gets the authors of this CollectionVersionDetailMetadata.  # noqa: E501


        :return: The authors of this CollectionVersionDetailMetadata.  # noqa: E501
        :rtype: list[str]
        """
        return self._authors

    @authors.setter
    def authors(self, authors):
        """Sets the authors of this CollectionVersionDetailMetadata.


        :param authors: The authors of this CollectionVersionDetailMetadata.  # noqa: E501
        :type: list[str]
        """

        self._authors = authors

    @property
    def homepage(self):
        """Gets the homepage of this CollectionVersionDetailMetadata.  # noqa: E501


        :return: The homepage of this CollectionVersionDetailMetadata.  # noqa: E501
        :rtype: object
        """
        return self._homepage

    @homepage.setter
    def homepage(self, homepage):
        """Sets the homepage of this CollectionVersionDetailMetadata.


        :param homepage: The homepage of this CollectionVersionDetailMetadata.  # noqa: E501
        :type: object
        """

        self._homepage = homepage

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, CollectionVersionDetailMetadata):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
