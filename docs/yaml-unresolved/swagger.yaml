info:
  description: 'Galaxy 3.2 API (wip)'
  title: 'Galaxy 3.2 API (wip)'
  version: "1.2.0"
  contact:
    url: https://github.com/ansible/galaxy/issues
    name: 'Ansible Galaxy Issues'
    
openapi: 3.0.0

servers:
  - url: https://galaxy.ansible.com/
    description: 'Production server (uses live data)'
  - url: https://galaxy-dev.ansible.com/
    description: 'shared public dev server'
  - url: http://localhost:8000
    description: 'local sandbox'
    
externalDocs:
  url: https://galaxy.ansible.com/docs/
  
tags:
  - name: 'collections'
    externalDocs:
      url: https://galaxy.ansible.com/docs/contributing/creating_collections.html
      description: 'Creating Collections docs at galaxy.ansible.com'
  - name: 'collection-imports'
  - name: 'collection-versions'
  - name: 'download'
  - name: 'introspection'
    description: 'API used to gather information about the API itself'
  - name: 'v2'
    description: 'API endpoints from the v2 API'
  - name: 'notifications'
  - name: 'me'
    description: 'API related to the current user.'
  - name: 'search'
  - name: 'namespaces'
  - name: 'tags'
    description: 'API for Ansible Galaxy tags.'
  - name: 'users'
  - name: 'v1'
    description: 'API endpoints from the v1 API.'
    
paths:
  '/api/':
    get:
      summary: 'Get info about the API'
      operationId: GetAPI
      tags:
        - introspection
      parameters: []
      responses:
        '200':
          description: 'A map of endpoints in the API'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/APIEndpoints'
 
  '/api/v1/':
    get:
      summary: 'Get info about the v1 API'
      operationId: GetApiV1
      tags:
        - introspection
        - v1
      parameters: []
      responses:
        '200':
          description: 'A map of endpoints in the v1 API'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/APIEndpoints'
                
  '/api/v1/search/':
    get:
      summary: 'Get info about the v1 search API'
      operationId: GetApiV1Search
      tags:
        - search
        - introspection
        - v1
      parameters: []
      responses:
        '200':
          description: 'A map of endpoints in the v1 search API'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/APIEndpoints'
                  
  '/api/v1/me/':
    get:
      summary: 'Get the User info for the current user'
      operationId: GetMeDetail
      tags:
        - me
        - v1
      parameters:
        - $ref: '#/components/parameters/Search'
      responses:
        '200':
          description: 'Response with the current User'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'

  '/api/v1/namespaces/':
    get:
      summary: 'Get a list of Namespaces'
      operationId: ListNamespaces
      tags:
        - namespaces
        - v1
      parameters:
        - $ref: '#/components/parameters/Page'
        - $ref: '#/components/parameters/PageSize'
        - $ref: '#/components/parameters/Search'
      responses:
        '200':
          $ref: '#/components/responses/Namespaces'
          
  '/api/v1/search/content/':
    get:
      summary: 'Get a list of Contents by searching'
      operationId: ListContentBySearch
      tags:
        - search
        - v1
      parameters:
        - $ref: '#/components/parameters/Page'
        - $ref: '#/components/parameters/PageSize'
      responses:
        '200':
          $ref: '#/components/responses/Contents'

  '/api/v1/search/roles/':
    get:
      operationId: ListRoleBySearch
      tags:
        - search
        - v1
      parameters:
        - $ref: '#/components/parameters/Page'
        - $ref: '#/components/parameters/PageSize'
      responses:
        '200':
          $ref: '#/components/responses/Roles'
          
  '/api/v1/search/tags/':
    get:
      summary: 'Get a list of Tags by searching'
      operationId: ListTagBySearch
      tags:
        - search
        - v1
      parameters:
        - $ref: '#/components/parameters/Page'
        - $ref: '#/components/parameters/PageSize'
        # TODO: search param tags
      responses:
        '200':
          $ref: '#/components/responses/Tags'
          
  '/api/v1/tags/':
    get:
      summary: 'Get a list of Galaxy Tags'
      operationId: ListTags
      tags:
        - tags
        - v1
      parameters:
        - $ref: '#/components/parameters/Page'
        - $ref: '#/components/parameters/PageSize'
        - $ref: '#/components/parameters/Search'
      responses:
        '200':
          $ref: '#/components/responses/Tags'
          
  '/api/v1/tags/{id}/':
    get:
      summary: 'Get a Galaxy Tag'
      operationId: GetTagById
      tags:
        - tags
        - v1
      parameters:
        - description: 'Tag id'
          in: path
          name: id
          required: true
          schema:
            type: string
        - $ref: '#/components/parameters/Search'
      responses:
        '200':
          description: 'A Galaxy Tag'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Tag'
  
  '/api/v1/users/':
    get:
      summary: 'Get a list of Users'
      operationId: ListUsers
      tags:
        - users
        - v1
      parameters:
        - $ref: '#/components/parameters/Page'
        - $ref: '#/components/parameters/PageSize'
        - $ref: '#/components/parameters/Search'
      responses:
        '200':
          $ref: '#/components/responses/Users'

  '/api/v1/users/{id}/':
    get:
      summary: 'Get an User by id'
      operationId: GetUserById
      tags:
        - users
        - v1
      parameters:
        - $ref: '#/components/parameters/UserId'
        - $ref: '#/components/parameters/Search'
      responses:
        '200':
          description: 'Response with a User'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'

    patch:
      summary: 'Patch/update an User by id'
      operationId: PatchUserById
      tags:
        - users
        - v1
      parameters:
        - $ref: '#/components/parameters/UserId'
        - $ref: '#/components/parameters/Search'
      requestBody:
        description: 'An User to update to'
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserUpdate'

      responses:
        '200':
          description: 'The User updated by the PATCH'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'

  '/api/v2/collection-imports/{id}/':
    get:
      summary: 'Get a Collection-Import (import task) by id'
      operationId: GetCollectionImportById
      tags:
        - collection-imports
        - v2
      parameters:
        - description: 'A unique integer value identifying this collection import.'
          in: path
          name: id
          required: true
          schema:
            type: string
        - $ref: '#/components/parameters/Search'
      responses:
        '200':
          description: 'The result of a collection import'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CollectionImportResult'
                
  '/api/v2/collection-versions/{id}/artifact/':
    get:
      operationId: GetCollectionVersionArtifactById
      tags:
        - collection-versions
        - v2
      parameters:
        - description: 'The CollectionVersion id'
          in: path
          name: id
          required: true
          schema:
            type: string
        - $ref: '#/components/parameters/Search'
      responses:
        '200':
          $ref: '#/components/responses/CollectionVersionArtifact'

  '/api/v2/collection-versions/{version_pk}/':
    get:
      summary: 'Get a CollectionVersion by version_pk'
      operationId: GetCollectionVersionByVersionPk
      tags:
        - collection-versions
        - v2
      parameters:
        - description: 'The CollectionVersion version_pk'
          in: path
          name: version_pk
          required: true
          schema:
            type: string
      responses:
        '200':
          $ref: '#/components/responses/CollectionVersion'
                
  '/api/v2/collections/':
    post:
      summary: 'Create a new CollectionVersion by importing a collection artifact'
      operationId: ImportCollectionVersionArtifact
      tags:
        - collections
        - v2
      parameters: []
      requestBody:
        $ref: '#/components/requestBodies/CollectionVersionArtifactBody'
      responses:
        '202':
          $ref: '#/components/responses/CreateCollectionResult'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '409':
          $ref: '#/components/responses/Conflict'
          
  '/api/v2/collections/{id}/':
    get:
      summary: 'Get a Collection by id'
      operationId: GetCollectionById
      tags:
        - collections
        - v2
      parameters:
        - $ref: '#/components/parameters/CollectionId'
      responses:
        '200':
          description: 'A Collection'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Collection'

  '/api/v2/collections/{id}/versions/':
    get:
      summary: 'Get list of versions for a collection id'
      operationId: ListCollectionVersionsById
      tags:
        - collections
        - v2
      parameters:
        - $ref: '#/components/parameters/CollectionId'
        - $ref: '#/components/parameters/Page'
        - $ref: '#/components/parameters/PageSize'
        - $ref: '#/components/parameters/Search'
      responses:
        '200':
          $ref: '#/components/responses/CollectionVersions'
          
  '/api/v2/collections/{namespace}/{name}/':
    parameters:
      - $ref: '#/components/parameters/CollectionNamespace'
      - $ref: '#/components/parameters/CollectionName'
    get:
      summary: 'Get a Collection by namespace and name'
      operationId: GetCollectionByNamespaceName
      tags:
        - collections
        - v2
      responses:
        '200':
          description: 'A Collection'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Collection'
                
  '/api/v2/collections/{namespace}/{name}/versions/':
    parameters:
      - $ref: '#/components/parameters/CollectionNamespace'
      - $ref: '#/components/parameters/CollectionName'
    get:
      summary: 'Get a list of CollectionVersions for a Collection by namespace and name'
      operationId: ListCollectionVersionsByNamespaceName
      tags:
        - collections
        - v2
      parameters:
        - $ref: '#/components/parameters/Page'
        - $ref: '#/components/parameters/PageSize'
        - $ref: '#/components/parameters/Search'
      responses:
        '200':
          $ref: '#/components/responses/CollectionVersions'
          
  '/api/v2/collections/{namespace}/{name}/versions/{version}/':
    parameters:
      - $ref: '#/components/parameters/CollectionNamespace'
      - $ref: '#/components/parameters/CollectionName'
      - $ref: '#/components/parameters/CollectionVersion'
    get:
      summary: 'Get a CollectionVersion by namespace, name, and version'
      operationId: GetCollectionVersion
      tags:
        - collections
        - v2
      responses:
        '200':
          $ref: '#/components/responses/CollectionVersion'
                
  '/api/v2/collections/{namespace}/{name}/versions/{version}/artifact/':
    parameters:
      - $ref: '#/components/parameters/CollectionNamespace'
      - $ref: '#/components/parameters/CollectionName'
      - $ref: '#/components/parameters/CollectionVersion'
    get:
      summary: 'Get Artifact details for a Collection by namespace, name, and version'
      operationId: GetCollectionVersionArtifact
      tags:
        - collections
        - v2
      parameters:
        - $ref: '#/components/parameters/Search'
      responses:
        '200':
          $ref: '#/components/responses/CollectionVersionArtifact'

  '/download/{filename}':
    get:
      summary: 'Download the collection artifact'
      operationId: DownloadArtifactByFilename
      tags:
        - download
      parameters:
        - description: 'CollectionVersion artifact filename'
          in: path
          name: filename
          required: true
          schema:
            type: string
      responses:
        '200':
          description: 'The collection artifact file binary contents'
          content:
            application/octet-stream:
              schema:
                type: string
                format: binary

components:
  schemas:
    Error:
      type: object
      description: 'Error data'
      properties:
        code:
          description: 'Unique identifier for the error'
          type: string
          example: 'invalid'
        message:
          type: string
          example: 'namespace and name parameters are required'
        field:
          description: 'The name of the field involved'
          type: string
          example: 'namespace'
      required:
        - code
        - message
        
    APIException:
      type: object
      description: 'API Exception'
      properties:
        code:
          description: 'Unique identifier for the exception'
          type: string
          example: 'not_authenticated'
        message:
          type: string
          example: 'Authentication credentials were not provided.'
        errors:
          description: 'A list of additional error objects'
          type: array
          items:
            $ref: '#/components/schemas/Error'
      required:
        - code
        - message
        
    ConflictError:
      allOf:
        - $ref: '#/components/schemas/APIException'
        
    ConflictCollectionExistsError:
      allOf:
        - $ref: '#/components/schemas/ConflictError'
        
    RepositoryNameError:
      allOf:
        - $ref: '#/components/schemas/ConflictError'
        
    ArtifactExistsError:
      allOf:
        - $ref: '#/components/schemas/ConflictError'
        
    ValidationError:
      allOf:
        - $ref: '#/components/schemas/APIException'
        
    APIEndpoints:
      description: 'Map of API endpoint names to URLS'
      type: object
      additionalProperties:
        type: string
        
    PageCount:
      type: integer
      
    PageNext:
      type: string
      
    PagePrevious:
      type: string
      
    CollectionVersionLink:
      type: object
      properties:
        href:
          description: 'The URL to the CollectionVersion'
          type: string
        version:
          type: string
          maxLength: 64

    CollectionVersionArtifactDetail:
      type: object
      properties:
        download_url:
          readOnly: true
          type: string
        filename:
          readOnly: true
          type: string
        sha256:
          type: string
        size:
          type: integer
          
    Collection:
      type: object
      properties:
        latest_version:
          $ref: '#/components/schemas/CollectionVersionLink'
        created:
          type: string
          readOnly: true
        deprecated:
          type: boolean
        name:
          type: string
        namespace:
          $ref: '#/components/schemas/CollectionNamespace'
        modified:
          type: string
          readOnly: true
        id:
          type: integer
          readOnly: true
        href:
          type: string
        versions_url:
          type: string
          
    CollectionImportError:
      type: object
      properties:
        code:
          type: string
        description:
          type: string
        traceback:
          type: string
          
    CollectionImportMessage:
      description: 'Message from collection importer including lint results'
      required:
      - level
      - message
      - time
      type: object
      properties:
        level:
          type: string
        message:
          type: string
        time:
          type: string
          format: date-time
          
    CollectionCreationResult:
      description: 'A map of collection import task info, including its url'
      type: object
      properties:
        task:
          description: 'The url for the queued collection import task. Check it for progress and status.'
          type: string
          
    CollectionImportResult:
      description: 'Collection import result'
      required:
      - error
      - finished_at
      - id
      - job_id
      - lint_records
      - messages
      - name
      - namespace
      - started_at
      - state
      - version
      type: object
      properties:
        error:
          $ref: '#/components/schemas/CollectionImportError'
        finished_at:
          type: string
          format: date-time
        id:
          type: integer
        imported_version:
          type: string
          readOnly: true
        job_id:
          type: string
          format: uuid
        lint_records:
          type: object
        messages:
          type: array
          items:
            $ref: '#/components/schemas/CollectionImportMessage'
        name:
          maxLength: 64
          type: string
        namespace:
          type: string
        started_at:
          type: string
          format: date-time
        state:
          type: string
        version:
          maxLength: 64
          type: string
          
    CollectionNamespace:
      type: object
      properties:
        name:
          type: string
        id:
          type: integer
        href:
          description: 'link to the Namespace'
          type: string
          
    CollectionVersionDetailCollection:
      type: object
      properties:
        name:
          type: string
        id:
          type: integer
        href:
          description: 'link to the Collection'
          type: string
          
    CollectionVersionDetailArtifact:
      type: object
      properties:
        filename:
          type: string
        size:
          type: integer
        sha256:
          type: string
          
    CollectionVersionDetailMetadata:
      description: "The Collection Version metadata from collections galaxy.yml or MANIFEST.JSON"
      type: object
      properties:
        documentation: {}
        description:
          type: string
        readme:
          type: string
        repository: {}
        issues: {}
        version:
          type: string
        license_file: {}
        tags:
          type: array
          items:
            type: string
        dependencies:
          type: object
        license:
          type: array
          items:
            type: string
        name:
          type: string
        namespace:
          type: string
        authors:
          type: array
          items:
            type: string
        homepage: {}
        
    CollectionVersion:
      type: object
      properties:
        artifact:
          $ref: '#/components/schemas/CollectionVersionDetailArtifact'   
        metadata:
          $ref: '#/components/schemas/CollectionVersionDetailMetadata'
        hidden:
          type: boolean
        download_url:
          type: string
        namespace:
          $ref: '#/components/schemas/CollectionNamespace'
        id:
          type: integer
        href:
          type: string
        collection:
          $ref: '#/components/schemas/CollectionVersionDetailCollection'

    CollectionVersionArtifactData:
      description: 'CollectionVersionArtifact archive file binary and sha256 checksum. Used for importing collection artifacts'
      type: object 
      properties:
        sha256:
          description: 'The sha256sum of the collection artifact file'
          type: string
        file:
          description: 'The binary contents of a collection artifact'
          type: string
          format: binary
                
    V1BaseModel:
      description: 'Base for common v1 shared model attributes' 
      type: object
      properties:
        id:
          description: 'Database ID for this object.'
          readOnly: true
          type: integer
        url:
          description: 'URL for this resource.'
          readOnly: true
          type: string
        related:
          description: 'Data structure with URLs of related resources.'
          readOnly: true
          type: object
          additionalProperties:
            type: string
        summary_fields:
          description: >-
            Data structure with name/description for related
            resources.
          readOnly: true
          type: object
          additionalProperties: true
        active:
          readOnly: true
          type: string
        modified:
          description: 'Timestamp when this object was last modified.'
          readOnly: true
          type: string
        created:
          description: 'Timestamp when this object was created.'
          readOnly: true
          type: string
      
    Content:
      allOf:
        - $ref: '#/components/schemas/V1BaseModel'
        - type: object
          properties:
            company:
              maxLength: 50
              nullable: true
              type: string
            description:
              maxLength: 255
              type: string
            download_count:
              readOnly: true
              type: string
            download_rank:
              type: number
            imported:
              format: date-time
              nullable: true
              type: string
            is_valid:
              readOnly: true
              type: boolean
            license:
              maxLength: 50
              type: string
            min_ansible_version:
              maxLength: 10
              nullable: true
              type: string
            name:
              maxLength: 512
              type: string
            relevance:
              type: number
            role_type:
              readOnly: true
              type: string
            search_rank:
              type: number
            travis_status_url:
              readOnly: true
              type: string
            username:
              readOnly: true
              type: string
          required:
            - name
            - relevance
            - search_rank
            - download_rank
          
    Namespace:
      description: 'A Namespace'
      allOf:
        - $ref: '#/components/schemas/V1BaseModel'      
        - type: object
          properties:
            avatar_url:
              maxLength: 256
              nullable: true
              type: string
            company:
              maxLength: 256
              nullable: true
              type: string
            description:
              maxLength: 255
              type: string
            email:
              maxLength: 256
              nullable: true
              type: string
            html_url:
              maxLength: 256
              nullable: true
              type: string
            is_vendor:
              type: boolean
            location:
              maxLength: 256
              nullable: true
              type: string
            name:
              maxLength: 512
              type: string
          required:
            - name
        
    Role:
      description: 'An Ansible Role'
      allOf:
        - $ref: '#/components/schemas/V1BaseModel'  
        - type: object
          properties:
            company:
              maxLength: 50
              nullable: true
              type: string
            description:
              maxLength: 255
              type: string
            download_count:
              readOnly: true
              type: string
            download_rank:
              type: number
            imported:
              format: date-time
              nullable: true
              type: string
            is_valid:
              readOnly: true
              type: boolean
            license:
              maxLength: 50
              type: string
            min_ansible_version:
              maxLength: 10
              nullable: true
              type: string
            name:
              maxLength: 512
              type: string
            relevance:
              type: number
            role_type:
              readOnly: true
              type: string
            search_rank:
              type: number
            travis_status_url:
              readOnly: true
              type: string
            username:
              readOnly: true
              type: string
          required:
            - name
            - relevance
            - search_rank
            - download_rank

    Tag:
      description: 'A v1 galaxy Tag'
      allOf:
        - $ref: '#/components/schemas/V1BaseModel'  
        - type: object
          properties:
            created:
              description: 'Timestamp when this tag was created.'
              readOnly: true
              type: string
            name:
              maxLength: 512
              type: string
          required:
            - name
        
    User:
      description: 'A v1 User'
      allOf:
        - $ref: '#/components/schemas/V1BaseModel' 
        - type: object
          properties:
            avatar_url:
              maxLength: 256
              type: string
            date_joined:
              format: date-time
              type: string
            full_name:
              maxLength: 254
              type: string
            staff:
              readOnly: true
              type: string
            username:
              description: >-
                Required. 30 characters or fewer. Letters, numbers and
                @/./+/-/_ characters
              maxLength: 30
              pattern: '^[a-zA-Z0-9_.@+-]+$'
              type: string
          required:
            - username
        
    UserUpdate:
      description: 'User data to update'
      properties:
        avatar_url:
          maxLength: 256
          type: string
        date_joined:
          format: date-time
          type: string
        full_name:
          maxLength: 254
          type: string
        username:
          description: >-
            Required. 30 characters or fewer. Letters, numbers and
            @/./+/-/_ characters
          maxLength: 30
          pattern: '^[a-zA-Z0-9_.@+-]+$'
          type: string

    # Instead of creating a schema type for each paginated
    # might be able to make 'results' a PageResults type.
    # And make PageResults use 'anyOf' and a discriminator
    # to 'choose' the correct type in the list. But currently
    # there isn't info in the Page data that indicates the
    # type to be expected in the 'results'. This would need
    # something like a 'result_type': 'CollectionVersion' in
    # the data.
    CollectionVersionsPage:
      description: 'A page of a list of CollectionVersionLinks'
      type: object
      properties:
        count:
          $ref: '#/components/schemas/PageCount'
        next:
          $ref: '#/components/schemas/PageNext'
        previous:
          $ref: '#/components/schemas/PagePrevious'
        results:
          description: 'List of CollectionVersionLinks for this Page'
          type: array
          items:
            $ref: '#/components/schemas/CollectionVersionLink'
            
    ContentsPage:
      description: "A page of a list of Contents"
      type: object
      properties:
        count:
          $ref: '#/components/schemas/PageCount'
        next:
          $ref: '#/components/schemas/PageNext'
        previous:
          $ref: '#/components/schemas/PagePrevious'
        results:
          description: 'List of Contents for this Page'
          type: array
          items:
            $ref: '#/components/schemas/Content'
            
    NamespacesPage:
      description: "A Page of a list of Namespaces"
      type: object
      properties:
        count:
          $ref: '#/components/schemas/PageCount'
        next:
          $ref: '#/components/schemas/PageNext'
        previous:
          $ref: '#/components/schemas/PagePrevious'
        results:
          description: 'List of Namespaces for this Page'
          type: array
          items:
            $ref: '#/components/schemas/Namespace' 
            
    RolesPage:
      description: "A Page of a list of Roles"
      type: object
      properties:
        count:
          $ref: '#/components/schemas/PageCount'
        next:
          $ref: '#/components/schemas/PageNext'
        previous:
          $ref: '#/components/schemas/PagePrevious'
        results:
          description: 'List of Roles for this Page'
          type: array
          items:
            $ref: '#/components/schemas/Role' 
            
    TagsPage:
      description: "A page of a list of Galaxy Tags"
      type: object
      properties:
        count:
          $ref: '#/components/schemas/PageCount'
        next:
          $ref: '#/components/schemas/PageNext'
        previous:
          $ref: '#/components/schemas/PagePrevious'
        results:
          description: 'List of Tags for this Page'
          type: array
          items:
            $ref: '#/components/schemas/Tag'
            
    UsersPage:
      description: "A page of a list of Users"
      type: object
      properties:
        count:
          $ref: '#/components/schemas/PageCount'
        next:
          $ref: '#/components/schemas/PageNext'
        previous:
          $ref: '#/components/schemas/PagePrevious'
        results:
          description: 'List of Users for this Page'
          type: array
          items:
            $ref: '#/components/schemas/User'


  responses:
    Conflict:
      description: 'Conflict Error'
      content:
        application/json:
          schema:
            oneOf:
              - $ref: '#/components/schemas/ConflictError'
            discriminator:
              propertyName: code
              mapping:
                conflict: '#/components/schemas/ConflictError'
                conflict.collection_exists: '#/components/schemas/ConflictCollectionExistsError'
                conflict.repository_name_conflict: '#/compontents/schemas/RepositoryNameError'
                conflict.artifact_exists: '#/compontents/schemas/ArtifactExistsError'
                
    Unauthorized:
      description: 'Authorization error'
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/APIException'

    CollectionVersions:
      description: 'Response containing a page of CollectionVersionLinks'
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/CollectionVersionsPage'

    CollectionVersion:
      description: 'Response contain a CollectionVersion'
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/CollectionVersion'
      links:
        GetCollectionVersionById:
          operationId: GetCollectionVersionById
          parameters:
            id: '$response.body#/id'
          description: >
            The `id` value returned in the response can be used as
            the `id` parameter in `{method} GET /api/v2/collection-versions/{id}`.
        GetCollectionById:
          operationId: GetCollectionById
          parameters:
            id: '$response.body#/collection/id'
        DownloadArtifactByFilename:
          operationId: DownloadArtifactByFilename
          parameters:
            id: '$response.body#/artifact/filename'
          description: >
            The `filename` value returned in the response can be used as
            the `filename` parameter in `GET /download/{filename}`.

    CollectionVersionArtifact:
      description: 'The collection version artifact details with download_url, sha256, and filename'
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/CollectionVersionArtifactDetail'

    CreateCollectionResult:
      description: 'Result of collection import task with task url'
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/CollectionCreationResult'
            
    Contents:
      description: 'Response containing a Page of Content search results'
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ContentsPage'
            
    Users:
      description: 'Response containing a Page of a list of Users'
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/UsersPage'
            
    Namespaces:
      description: 'Response containing a Page of a list of Namespaces'
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/NamespacesPage'
            
    Roles:
      description: 'Response containing a Page of a list of Roles'
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/RolesPage'
     
    Tags:
      description: 'Response containing a Page of a list of Tags'
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/TagsPage'

  parameters:
    Page:
      description: 'Page number within the paginated result set.'
      in: query
      name: page
      required: false
      schema:
        type: integer
        default: 1
        
    PageSize:
      description: 'Number of results to return per page.'
      in: query
      name: page_size
      required: false
      schema:
        type: integer
        default: 10
        minimum: 0
        maximum: 1000
        
    Search:
      description: 'Term to search for'
      in: query
      name: search
      required: false
      schema:
        type: string
        
    CollectionId:
      description: 'The Collection id'
      in: path
      name: id
      required: true
      schema:
        type: string
        
    CollectionNamespace:
      description: 'The collection namespace'
      in: path
      name: namespace
      required: true
      schema:
        type: string
        
    CollectionName:
      description: 'The collection name'
      in: path
      name: name
      required: true
      schema:
        type: string
        pattern: ^(?!.*__)[a-z]+[0-9a-z_]*$'
        
    CollectionVersion:
      description: 'A Semantic Version string'
      in: path
      name: version
      required: true
      schema:
        type: string
        pattern: ^((([0-9]+)\.([0-9]+)\.([0-9]+)(?:-([0-9a-zA-Z-]+(?:\.[0-9a-zA-Z-]+)*))?)(?:\+([0-9a-zA-Z-]+(?:\.[0-9a-zA-Z-]+)*))?)$
        
    UserId:
      description: 'User id'
      in: path
      name: id
      required: true
      schema:
        type: string
        
  requestBodies:
    CollectionVersionArtifactBody:
      description: "A multipart/form encoded payload including the binary collection artifact file contents and it's sha256sum"
      content:
        multipart/form-data:
          schema:
            $ref: '#/components/schemas/CollectionVersionArtifactData'