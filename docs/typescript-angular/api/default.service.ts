/**
 * Galaxy 3.2 API (wip)
 * Galaxy 3.2 API (wip)
 *
 * OpenAPI spec version: 1.1.1
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 *//* tslint:disable:no-unused-variable member-ordering */

import { Inject, Injectable, Optional }                      from '@angular/core';
import { HttpClient, HttpHeaders, HttpParams,
         HttpResponse, HttpEvent }                           from '@angular/common/http';
import { CustomHttpUrlEncodingCodec }                        from '../encoder';

import { Observable }                                        from 'rxjs/Observable';

import { Collection } from '../model/collection';
import { CollectionVersion } from '../model/collectionVersion';
import { CollectionVersionArtifactDetail } from '../model/collectionVersionArtifactDetail';
import { CollectionVersionLinks } from '../model/collectionVersionLinks';

import { BASE_PATH, COLLECTION_FORMATS }                     from '../variables';
import { Configuration }                                     from '../configuration';


@Injectable()
export class DefaultService {

    protected basePath = 'https://galaxy.ansible.com/';
    public defaultHeaders = new HttpHeaders();
    public configuration = new Configuration();

    constructor(protected httpClient: HttpClient, @Optional()@Inject(BASE_PATH) basePath: string, @Optional() configuration: Configuration) {
        if (basePath) {
            this.basePath = basePath;
        }
        if (configuration) {
            this.configuration = configuration;
            this.basePath = basePath || configuration.basePath || this.basePath;
        }
    }

    /**
     * @param consumes string[] mime-types
     * @return true: consumes contains 'multipart/form-data', false: otherwise
     */
    private canConsumeForm(consumes: string[]): boolean {
        const form = 'multipart/form-data';
        for (const consume of consumes) {
            if (form === consume) {
                return true;
            }
        }
        return false;
    }


    /**
     * 
     * 
     * @param namespace 
     * @param name 
     * @param page A page number within the paginated result set.
     * @param pageSize Number of results to return per page.
     * @param search A search term.
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public listVersionListViewApiV2CollectionsNamespaceNameVersions(namespace: string, name: string, page?: number, pageSize?: number, search?: string, observe?: 'body', reportProgress?: boolean): Observable<CollectionVersionLinks>;
    public listVersionListViewApiV2CollectionsNamespaceNameVersions(namespace: string, name: string, page?: number, pageSize?: number, search?: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<CollectionVersionLinks>>;
    public listVersionListViewApiV2CollectionsNamespaceNameVersions(namespace: string, name: string, page?: number, pageSize?: number, search?: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<CollectionVersionLinks>>;
    public listVersionListViewApiV2CollectionsNamespaceNameVersions(namespace: string, name: string, page?: number, pageSize?: number, search?: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (namespace === null || namespace === undefined) {
            throw new Error('Required parameter namespace was null or undefined when calling listVersionListViewApiV2CollectionsNamespaceNameVersions.');
        }

        if (name === null || name === undefined) {
            throw new Error('Required parameter name was null or undefined when calling listVersionListViewApiV2CollectionsNamespaceNameVersions.');
        }




        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});
        if (page !== undefined && page !== null) {
            queryParameters = queryParameters.set('page', <any>page);
        }
        if (pageSize !== undefined && pageSize !== null) {
            queryParameters = queryParameters.set('page_size', <any>pageSize);
        }
        if (search !== undefined && search !== null) {
            queryParameters = queryParameters.set('search', <any>search);
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.get<CollectionVersionLinks>(`${this.basePath}/api/v2/collections/${encodeURIComponent(String(namespace))}/${encodeURIComponent(String(name))}/versions/`,
            {
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * 
     * 
     * @param filename Download the collection artifact
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public retrieveArtifactDownloadViewDownloadFilename(filename: string, observe?: 'body', reportProgress?: boolean): Observable<string>;
    public retrieveArtifactDownloadViewDownloadFilename(filename: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<string>>;
    public retrieveArtifactDownloadViewDownloadFilename(filename: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<string>>;
    public retrieveArtifactDownloadViewDownloadFilename(filename: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (filename === null || filename === undefined) {
            throw new Error('Required parameter filename was null or undefined when calling retrieveArtifactDownloadViewDownloadFilename.');
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/octet-stream'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.get<string>(`${this.basePath}/download/${encodeURIComponent(String(filename))}`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * 
     * 
     * @param namespace 
     * @param name 
     * @param version 
     * @param search A search term.
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public retrieveCollectionArtifactViewApiV2CollectionsNamespaceNameVersionsVersionArtifact(namespace: string, name: string, version: string, search?: string, observe?: 'body', reportProgress?: boolean): Observable<CollectionVersionArtifactDetail>;
    public retrieveCollectionArtifactViewApiV2CollectionsNamespaceNameVersionsVersionArtifact(namespace: string, name: string, version: string, search?: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<CollectionVersionArtifactDetail>>;
    public retrieveCollectionArtifactViewApiV2CollectionsNamespaceNameVersionsVersionArtifact(namespace: string, name: string, version: string, search?: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<CollectionVersionArtifactDetail>>;
    public retrieveCollectionArtifactViewApiV2CollectionsNamespaceNameVersionsVersionArtifact(namespace: string, name: string, version: string, search?: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (namespace === null || namespace === undefined) {
            throw new Error('Required parameter namespace was null or undefined when calling retrieveCollectionArtifactViewApiV2CollectionsNamespaceNameVersionsVersionArtifact.');
        }

        if (name === null || name === undefined) {
            throw new Error('Required parameter name was null or undefined when calling retrieveCollectionArtifactViewApiV2CollectionsNamespaceNameVersionsVersionArtifact.');
        }

        if (version === null || version === undefined) {
            throw new Error('Required parameter version was null or undefined when calling retrieveCollectionArtifactViewApiV2CollectionsNamespaceNameVersionsVersionArtifact.');
        }


        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});
        if (search !== undefined && search !== null) {
            queryParameters = queryParameters.set('search', <any>search);
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.get<CollectionVersionArtifactDetail>(`${this.basePath}/api/v2/collections/${encodeURIComponent(String(namespace))}/${encodeURIComponent(String(name))}/versions/${encodeURIComponent(String(version))}/artifact/`,
            {
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * 
     * 
     * @param namespace The collection namespace
     * @param name The collection name
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public retrieveCollectionDetailViewApiV2CollectionsNamespaceName(namespace: string, name: string, observe?: 'body', reportProgress?: boolean): Observable<Collection>;
    public retrieveCollectionDetailViewApiV2CollectionsNamespaceName(namespace: string, name: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Collection>>;
    public retrieveCollectionDetailViewApiV2CollectionsNamespaceName(namespace: string, name: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Collection>>;
    public retrieveCollectionDetailViewApiV2CollectionsNamespaceName(namespace: string, name: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (namespace === null || namespace === undefined) {
            throw new Error('Required parameter namespace was null or undefined when calling retrieveCollectionDetailViewApiV2CollectionsNamespaceName.');
        }

        if (name === null || name === undefined) {
            throw new Error('Required parameter name was null or undefined when calling retrieveCollectionDetailViewApiV2CollectionsNamespaceName.');
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.get<Collection>(`${this.basePath}/api/v2/collections/${encodeURIComponent(String(namespace))}/${encodeURIComponent(String(name))}/`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * 
     * 
     * @param namespace 
     * @param name 
     * @param version A semantic version string
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public retrieveVersionDetailViewApiV2CollectionsNamespaceNameVersionsVersion(namespace: string, name: string, version: string, observe?: 'body', reportProgress?: boolean): Observable<CollectionVersion>;
    public retrieveVersionDetailViewApiV2CollectionsNamespaceNameVersionsVersion(namespace: string, name: string, version: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<CollectionVersion>>;
    public retrieveVersionDetailViewApiV2CollectionsNamespaceNameVersionsVersion(namespace: string, name: string, version: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<CollectionVersion>>;
    public retrieveVersionDetailViewApiV2CollectionsNamespaceNameVersionsVersion(namespace: string, name: string, version: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (namespace === null || namespace === undefined) {
            throw new Error('Required parameter namespace was null or undefined when calling retrieveVersionDetailViewApiV2CollectionsNamespaceNameVersionsVersion.');
        }

        if (name === null || name === undefined) {
            throw new Error('Required parameter name was null or undefined when calling retrieveVersionDetailViewApiV2CollectionsNamespaceNameVersionsVersion.');
        }

        if (version === null || version === undefined) {
            throw new Error('Required parameter version was null or undefined when calling retrieveVersionDetailViewApiV2CollectionsNamespaceNameVersionsVersion.');
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.get<CollectionVersion>(`${this.basePath}/api/v2/collections/${encodeURIComponent(String(namespace))}/${encodeURIComponent(String(name))}/versions/${encodeURIComponent(String(version))}/`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

}
